// src/pages/parts.jsx
import React, { useState } from "react";
import { Users, CalendarDays, ChevronDown, ChevronRight, Check, ArrowRight } from "lucide-react";

/* helpers de formatação */
function toMoney(n){ return `$${Number(n||0).toFixed(2)}`; }
function toCost(n){ const v = Math.abs(Number(n||0)); return `-$${v.toFixed(2)}`; }
function fmtDate(ts){ if(!ts) return '—'; const d = new Date(ts); return d.toLocaleDateString('en-US',{year:'numeric',month:'short',day:'2-digit'}); }
function fmtDateTime(ts){ if(!ts) return '—'; const d = new Date(ts); return d.toLocaleString('en-US',{year:'numeric',month:'short',day:'2-digit',hour:'2-digit',minute:'2-digit'}); }

/* Paginação enxuta (botões) — opcionalmente você pode usar a sua existente */
function Pagination({ page, setPage, totalPages }){
  return (
    <div className="pagination-controls" style={{ display:'flex', alignItems:'center', gap:8 }}>
      <button className="pg-btn" onClick={()=>setPage(1)} disabled={page===1}>«</button>
      <button className="pg-btn" onClick={()=>setPage(p=>Math.max(1,p-1))} disabled={page===1}>‹</button>
      <span className="muted" style={{minWidth:70, textAlign:'center'}}>Page {page}/{totalPages}</span>
      <button className="pg-btn" onClick={()=>setPage(p=>Math.min(totalPages,p+1))} disabled={page===totalPages}>›</button>
      <button className="pg-btn" onClick={()=>setPage(totalPages)} disabled={page===totalPages}>»</button>
    </div>
  );
}

/* =================== Breakdown =================== */
export function BreakdownServices({ services }){
  if(!services || services.length===0){
    return <div className="fin-break fin-empty" style={{textAlign:'left'}}>No service details available.</div>;
  }
  const total = services.reduce((s,x)=> s + Number(x.finalValue||0), 0);
  return (
    <div className="fin-break">
      <div className="table">
        <div className="thead">
          <div className="th">Client</div>
          <div className="th">Date</div>
          <div className="th">Service</div>
          <div className="th">Park</div>
          <div className="th center">Team</div>
          <div className="th center">Guests</div>
          <div className="th center">Hopper</div>
          <div className="th right">Amount</div>
        </div>
        {services.map(s=> (
          <div className="tr" key={s.id}>
            <div className="td">{`${s.firstName||''} ${s.lastName||''}`.trim() || '—'}</div>
            <div className="td">{s.serviceDate? new Date(s.serviceDate).toLocaleDateString() : '—'}</div>
            <div className="td">{s?.serviceType?.name || '—'}</div>
            <div className="td">{s.park || '—'}</div>
            <div className="td center">{s.team || '—'}</div>
            <div className="td center">{s.guests ?? '—'}</div>
            <div className="td center">{s.hopper ? 'Yes' : 'No'}</div>
            <div className="td right">{toMoney(s.finalValue)}</div>
          </div>
        ))}
        <div className="tr">
          <div className="td" style={{gridColumn:'1 / 7'}}></div>
          <div className="td right" style={{fontWeight:800}}>Total</div>
          <div className="td right" style={{fontWeight:800}}>{toMoney(total)}</div>
        </div>
      </div>
    </div>
  );
}

/* =================== Section (Status Lists) =================== */
export function SectionStatus({
  title, rows, totalCount=0, page=1, totalPages=1, onPage,
  serviceById, open, onToggle, tagClass, statusLabel, showPaidAt=false,
  onMarkPaid, onMoveNextWeek
}){
  const showActionsPaid  = typeof onMarkPaid === 'function' && statusLabel === 'APPROVED';
  const showActionsMove  = typeof onMoveNextWeek === 'function' && statusLabel === 'AWAITING';

  return (
    <section className="fin-section">
      <div className="fin-head">
        <h3>{title}</h3>
        {totalCount > 0 && <div className="muted">{totalCount} items</div>}
      </div>
      <div className="fin-card">
        {rows?.length===0 ? (
          <div className="fin-empty">No items for this filter.</div>
        ) : (
          <>
            <div className="table">
              <div className="thead">
                <div className="th">Partner</div>
                <div className="th">Week</div>
                <div className="th center">Services</div>
                <div className="th right">Total</div>
                <div className="th center">Status</div>
                <div className="th center">Breakdown</div>
                {(showActionsPaid || showActionsMove) && <div className="th center">Actions</div>}
              </div>
              {rows.map(p=>{
                const lines = (p.serviceIds||[]).map(id=> serviceById.get(id)).filter(Boolean);
                const totalFromLines = lines.reduce((sum, s) => sum + Number(s?.finalValue || 0), 0);
                const displayTotal = lines.length ? totalFromLines : Number(p.total || 0);
                const partnerShown = (p.partnerName || (lines[0]?.team) || '—');
                const isOpen = open.has(p.id);
                return (
                  <div className="tr" key={p.id}>
                    <div className="td"><Users size={14}/> {partnerShown}</div>
                    <div className="td">
                      <div className="wk-chip"><CalendarDays size={14}/> {p.weekStart? `${fmtDate(p.weekStart)} — ${fmtDate(p.weekEnd)}` : '—'}</div>
                      {showPaidAt && p.paidAt && <div style={{fontSize:12,color:'#64748B'}}>Paid at: {fmtDateTime(p.paidAt)}</div>}
                    </div>
                    <div className="td center">{lines.length}</div>
                    <div className="td right"><b>{toMoney(displayTotal)}</b></div>
                    <div className="td center">
                      <span className={`tag ${tagClass}`}>
                        {statusLabel === 'AWAITING' ? 'AWAITING APPROVAL' : statusLabel}
                      </span>
                    </div>
                    <div className="td center">
                      <button className="pg-btn" onClick={()=>onToggle(p.id)}>{isOpen? <ChevronDown size={16}/> : <ChevronRight size={16}/>} Details</button>
                    </div>

                    {(showActionsPaid || showActionsMove) && (
                      <div className="td center" style={{ display:'flex', justifyContent:'center', gap:8 }}>
                        {showActionsPaid && (
                          <button
                            className="btn btn--sm"
                            style={{ background:'#059669', color:'#fff', fontWeight:700 }}
                            title="Mark this payment as PAID"
                            onClick={() => onMarkPaid?.(p.id)}
                          >
                            <Check size={14}/> Mark Paid
                          </button>
                        )}
                        {showActionsMove && (
                          <button
                            className="btn btn--sm"
                            style={{ background:'#2563eb', color:'#fff', fontWeight:700 }}
                            title="Move to next week"
                            onClick={() => onMoveNextWeek?.(p.id)}
                          >
                            Next Week <ArrowRight size={14} style={{marginLeft:6}}/>
                          </button>
                        )}
                      </div>
                    )}

                    {isOpen && (
                      <div className="td" style={{gridColumn:'1 / -1', paddingTop:0}}>
                        <BreakdownServices services={lines} />
                      </div>
                    )}
                  </div>
                );
              })}
            </div>

            {/* Paginação (se foi passada) */}
            {onPage && (
              <div style={{ display:'flex', justifyContent:'flex-end', marginTop:10 }}>
                <Pagination page={page} setPage={onPage} totalPages={totalPages} />
              </div>
            )}
          </>
        )}
      </div>
    </section>
  );
}

/* =================== Weekly Client Costs (resumo) =================== */
export function SectionWeeklyClientCosts({ rows }){
  return (
    <section className="fin-section">
      <div className="fin-head"><h3>Weekly Costs</h3></div>
      <div className="fin-card">
        {!rows || rows.length===0 ? (
          <div className="fin-empty">No services found for the selected week.</div>
        ) : (
          <div className="table table--summary">
            <div className="thead">
              <div className="th">Client</div>
              <div className="th right">Total Cost (–)</div>
              <div className="th">Breakdown</div>
            </div>
            {rows.map(row=> (
              <ClientRow key={row.client} row={row} />
            ))}
          </div>
        )}
      </div>
    </section>
  );
}

function ClientRow({ row }){
  const [open, setOpen] = useState(false);
  return (
    <div className="tr">
      <div className="td" style={{fontWeight:800}}>{row.client}</div>
      <div className="td right" style={{fontWeight:800}}>{toCost(row.total)}</div>
      <div className="td">
        <button className="pg-btn" onClick={()=>setOpen(v=>!v)}>{open? <ChevronDown size={16}/> : <ChevronRight size={16}/>} View services</button>
      </div>
      {open && (
        <div className="td" style={{gridColumn:'1 / -1', paddingTop:0}}>
          <BreakdownServices services={row.services} />
        </div>
      )}
    </div>
  );
}
